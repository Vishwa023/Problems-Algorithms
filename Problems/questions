Last Moment Preparation Questions:

Points:
-> structure of a TreeNode
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

//Another Stucture for Tree
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() {
        val = 0;
        left = NULL;
        right = NULL;
    }
    TreeNode(int x) {
        val = x;
        left = NULL;
        right = NULL;
    }
    TreeNode (int x, TreeNode* a, TreeNode* b) {
        val = x;
        left = a;
        right = b;
    }
};

1. Sorted Array to balance BST
PS: Given a sorted array. Write a function that creates a Balanced Binary Search Tree using array elements.
Hint:   1) Get the Middle of the array and make it root.
        2) Recursively do same for left half and right half.
            a) Get the middle of left half and make it left child of the root
                created in step 1.
            b) Get the middle of right half and make it right child of the
                root created in step 1.
    
2. Check if given graph is tree or not
Hint:   tree does not have any cycle
        -> to detect cycle we can use bfs or dfs (approach - For every visisted vertex 'v' if there is an adjacent vetex 'u' such that u is already visited and u is not the parent of the 'v' the there is a cycle in the graph)
        